\documentclass[a4paper]{article}
% generated by Docutils <http://docutils.sourceforge.net/>
\usepackage{fixltx2e} % LaTeX patches, \textsubscript
\usepackage{cmap} % fix search and cut-and-paste in Acrobat
\usepackage{ifthen}
\usepackage[T1]{fontenc}
\usepackage[utf8]{inputenc}
\usepackage{graphicx}
\setcounter{secnumdepth}{0}
\usepackage{longtable,ltcaption,array}
\setlength{\extrarowheight}{2pt}
\newlength{\DUtablewidth} % internal use in tables

%%% Custom LaTeX preamble
% PDF Standard Fonts
\usepackage{mathptmx} % Times
\usepackage[scaled=.90]{helvet}
\usepackage{courier}

%%% User specified packages and stylesheets

%%% Fallback definitions for Docutils-specific commands

% fieldlist environment
\ifthenelse{\isundefined{\DUfieldlist}}{
  \newenvironment{DUfieldlist}%
    {\quote\description}
    {\enddescription\endquote}
}{}

% titlereference role
\providecommand*{\DUroletitlereference}[1]{\textsl{#1}}

% transition (break, fancybreak, anonymous section)
\providecommand*{\DUtransition}[1][class-arg]{%
  \hspace*{\fill}\hrulefill\hspace*{\fill}
  \vskip 0.5\baselineskip
}

% hyperlinks:
\ifthenelse{\isundefined{\hypersetup}}{
  \usepackage[colorlinks=true,linkcolor=blue,urlcolor=blue]{hyperref}
  \urlstyle{same} % normal text font (alternatives: tt, rm, sf)
}{}


%%% Body
\begin{document}


\section{Riv Instruction%
  \label{riv-instruction}%
}
%
\begin{DUfieldlist}
\item[{Author:}]
Rykka G.Forest

\item[{Date:}]
2012-06-29 10:38:56

\item[{Version:}]
0.66

\item[{Github:}]
\url{https://github.com/Rykka/riv.vim}

\end{DUfieldlist}

\textbf{Riv} is a vim plugin for managing and writing \href{http://docutils.sourceforge.net/rst.html}{reStructuredText} documents.
Short for 'reStructuredText in Vim'.

It is for people either want to manage documents in a wiki way,
or writing reStructuredText documents in an easy way.


\subsection{Features%
  \label{features}%
}

These features are for all reStructuredText files.
%
\begin{DUfieldlist}
\item[{\hyperref[sections]{Sections}:}]
Section level and section number auto detected.

\item[{\hyperref[lists]{Lists}:}]
Auto Numbered and auto leveled bullet and enumerated list.

\item[{\hyperref[links]{Links}:}]
Jumping with links.

\item[{\hyperref[table]{Table}:}]
Auto formatted table.

\item[{\hyperref[folding]{Folding}:}]
Fold document by document structures (Section/List/Block).

\item[{\hyperref[indent]{Indent}:}]
Improved indentation

\item[{\hyperref[insert]{Insert}:}]
Improvment of some mapping in insert mode.

\item[{\hyperref[highlighting]{Highlighting}:}]
Improved syntax file.

\end{DUfieldlist}

These features are for the Riv Project.
%
\begin{DUfieldlist}
\item[{\hyperref[project]{Project}:}]
Manage your reStructuredText documents in a wiki way.

\item[{\hyperref[file]{File}:}]
Links to local file in rst documents.

\item[{\hyperref[scratch]{Scratch}:}]
A place for writing diary or hold idea and thoughts.

\item[{\hyperref[todos]{Todos}:}]
Writing todo lists in reStructuredText documents .

\item[{\hyperref[helpers]{Helpers}:}]
A help window for showing and doing something.
%
\begin{itemize}

\item \hyperref[todo-helper]{Todo Helper}: Managing todo items of project.

\end{itemize}

\item[{\hyperref[publish]{Publish}:}]
some wrapper to convert rst files to html/xml/latex/odt/...
(require python docutils package )

\end{DUfieldlist}
%
\begin{itemize}

\item Take a glance

\end{itemize}

\includegraphics{http://i.minus.com/jCFTijpr6oqYt.jpg}
%
\begin{itemize}

\item To Start: see \hyperref[instruction-details]{Instruction Details}

\end{itemize}


\subsection{Install%
  \label{install}%
}
%
\begin{itemize}

\item Using \href{www.github.com/gmarik/vundle}{Vundle}  (Recommend)

Add this line to your vimrc:
%
\begin{quote}{\ttfamily \raggedright \noindent
Bundle~'Rykka/riv.vim'
}
\end{quote}

\end{itemize}
%
\begin{itemize}

\item Using downloaded file.
Just extract to your \texttt{.vim} folder .

\end{itemize}
%
\begin{DUfieldlist}
\item[{NOTE:}]
Make sure the your .vim folder in option \texttt{runtimepath}
is before the \$VIMRUNTIME.

Otherwise the syntax/indent files for rst file will using the vim built-in one.

\end{DUfieldlist}
%
\begin{itemize}

\item Recommend plugins:
%
\begin{itemize}

\item \href{https://github.com/scrooloose/syntastic}{Syntastic}  for syntax checking of rst files.
(require python docutils package )

\item \href{https://github.com/mattn/calendar-vim}{Calendar} setting datestamp easier.

\end{itemize}

\end{itemize}


\subsection{Issues%
  \label{issues}%
}
%
\begin{itemize}

\item Currently it's a developing version. So things may change quickly.
keep up-to-date.

\item Both bug reports and feature request are welcome.
Please Post issues at \url{https://github.com/Rykka/riv.vim/issues}

\end{itemize}


\subsection{Todo%
  \label{todo}%
}


\subsubsection{Prev%
  \label{prev}%
}

See Changelog in doc/riv.txt
%
\begin{itemize}

\item 0.65:
%
\begin{itemize}

\item DONE 2012-06-27 take care of the slash of directory in windows .

\item FIXED 2012-06-28 correct cursor position when creating todo items and list items.

\item FIXED 2012-06-28 link highlight group removed after open another buffer.

\item FIXED 2012-06-28 auto mkdir when write file to disk

\item DONE 2012-06-28 format the scratch index, sort with year/month/day

\end{itemize}

\end{itemize}


\subsubsection{This%
  \label{this}%
}

Things todo in this version.
%
\begin{itemize}

\item 0.66:
%
\begin{DUfieldlist}
\item[{\hyperref[todos]{Todos}:}]
DONE 2012-06-29 add field list for todo items.

\item[{\hyperref[indent]{Indent}:}]
DONE 2012-06-29 the indentation in directives should return 0 after
2 blank lines

\item[{\hyperref[todos]{Todos}:}]
FIXME the calculation of child todo items

\item[{\hyperref[indent]{Indent}:}]
FIXME \texttt{<BS>} indentation to reach the begin of field list.

\end{DUfieldlist}

\end{itemize}


\subsubsection{Next%
  \label{next}%
}

Things todo in next versions.
%
\begin{DUfieldlist}
\item[{\hyperref[links]{Links}:}]
The standalone web link with \texttt{/} is detected as local file.

\item[{\hyperref[file]{File}:}]
A template or snippet or shortcut for adding \texttt{./} and \texttt{../} and files.
Maybe a sphinx doc ref as well.

\item[{\hyperref[riv-instruction]{Documents}:}]
Document part: options / commands.

\item[{\hyperref[riv-instruction]{Documents}:}]
Sreencast and screenshot of intro.

\item[{\hyperref[riv-instruction]{Documents}:}]
Seperate instruction and intro. help use instruction.rst

\item[{\hyperref[riv-instruction]{Documents}:}]
Add Specification/Intro of reStructuredText.

\item[{\hyperref[publish]{Publish}:}]
An option to enable highlighting todo items.

\item[{\hyperref[helpers]{Helpers}:}]
An option Helper and option cache.
Let people use it even without touching \texttt{.vimrc} .

\item[{\hyperref[scratch]{Scratch}:}]
Show Scratch sign in Calendar.

\item[{\hyperref[publish]{Publish}:}]
Support the reStructuredText document not in a project.

\item[{\hyperref[helpers]{Helpers}:}]
A command helper?

\item[{\hyperref[links]{Links}:}]
Link tags infile ?

\item[{\hyperref[todos]{Todos}:}]
Todo item priorities?

\item[{\hyperref[table]{Table}:}]
Support simple table format?

\item[{\hyperref[table]{Table}:}]
Support column span?

\item[{\hyperref[table]{Table}:}]
A vim table parser for compatible?

\item[{\hyperref[table]{Table}:}]
A shortcut or command to create table with row * col.

\item[{\hyperref[sections]{Sections}:}]
Adjust section level.

\item[{\hyperref[sections]{Sections}:}]
Shortcut to add sections like the content directive?

\item[{\hyperref[folding]{Folding}:}]
A buf parser write in python for performance?

\end{DUfieldlist}


%___________________________________________________________________________
\DUtransition



\section{Instruction Details%
  \label{instruction-details}%
}
%
\begin{itemize}

\item How to use?
%
\begin{itemize}

\item For writing reStructuredText documents in an easy way.

When editing an reStructuredText document (\texttt{*.rst} ),
these settings will be automatically on.
(make sure \texttt{filetype on} in your vimrc)

\item For managing documents in a wiki way, you should setup a project first,
see \hyperref[project]{Project}.

\end{itemize}

\item About the mapping

Default leader map for Riv is \texttt{<C-E>}.
You can change it by following options.
%
\begin{itemize}

\item \texttt{g:riv\_global\_leader} : leader map for Riv global mapping.
%
\begin{itemize}

\item \texttt{:RivIndex} \texttt{<C-E>ww} to open the project index.

\item \texttt{:RivAsk} \texttt{<C-E>wa} to choose one project to open.

\item \texttt{:RivScratchCreate} \texttt{<C-E>cc} Create or jump to the scratch of today.

\item \texttt{:RivScratchView} \texttt{<C-E>cv} View Scratch index.

\end{itemize}

\item \texttt{g:riv\_buf\_leader} : leader map for reStructuredText buffers.

\item \texttt{g:riv\_buf\_ins\_leader} : leader map for reStructuredText buffers's insert mode.

\end{itemize}

\end{itemize}


\subsection{For reStructuredText%
  \label{for-restructuredtext}%
}

These features are for all reStructuredText files.


\subsubsection{Sections%
  \label{sections}%
}

Section levels and numbers are auto detected.

The section number will be shown when folded.

Pressing \texttt{<Enter>} or double clicking on section title will toggle the folding
of the section.

Clicking on the section reference will bring you to the section title.
%
\begin{quote}

e.g. \hyperref[features]{Features} link will bring you to the \DUroletitlereference{Feature} Section (in vim)

\end{quote}
%
\begin{itemize}

\item Create Section Title:

Normal and Insert:
%
\begin{itemize}

\item Use \texttt{:RivTitle1} \texttt{<C-E>s1} ...  \texttt{:RivTitle6} \texttt{<C-E>s6} ,
To create level 1 to level 6 section title from current word.

If it's empty, you will be asked to input one.

\end{itemize}

\end{itemize}
%
\begin{DUfieldlist}
\item[{NOTE:}]
Although you can define a section title with most punctuations.

Riv use following punctuations for titles:

\textbf{=-\textasciitilde{}``'`} , you can change it with \texttt{g:riv\_section\_levels}

\end{DUfieldlist}


\subsubsection{Lists%
  \label{lists}%
}

Auto numbered and auto leveled bullet and enumerated list.

The Sequence of the list level is:
%
\begin{quote}

\texttt{* + - 1. A. a. I. i. 1) A) a) I) i) (1) (A) (a) (I) (i)}

\end{quote}
%
\begin{itemize}

\item Editing Lists:

Normal and Visual:
%
\begin{itemize}

\item \texttt{>} or \texttt{<C-ScrollWheelDown>}
Add Indentation, And add a level for list.

if the first item is a list , the indentation is based on the list item.
otherwise the indentation is based on \texttt{'shiftwidth'}.

\item \texttt{<} or \texttt{<C-ScrollWheelUp>}
Remove Indentation, And remove a level for list.

\end{itemize}

Insert Mode Only:
%
\begin{itemize}

\item \texttt{<CR>\textbackslash{}<KEnter>} (enter key and keypad enter key)
Insert the content of this list.

To insert content in new line of this list item. add a blank line before it.

\item \texttt{<C-CR>\textbackslash{}<C-KEnter>}
Insert a new list of current list level

\item \texttt{<S-CR>\textbackslash{}<S-KEnter>}
Insert a new list of current child list level

\item \texttt{<C-S-CR>\textbackslash{}<C-S-KEnter>}
Insert a new list of current parent list level

\end{itemize}

Normal and Insert:
%
\begin{itemize}

\item \texttt{:RivListTypeNext} \texttt{<C-E>l1}
Change current list item symbol to next type

\item \texttt{:RivListTyePrev} \texttt{<C-E>l2}
Change current list item symbol to prev type

\item \texttt{:RivListTypeRemove} \texttt{<C-E>lx}
Delete current list item symbol

\end{itemize}

\end{itemize}
%
\begin{DUfieldlist}
\item[{NOTE:}]
To contain a second paragraph (or blocks) in a list , you should make the left edge
lines up with the main paragraph.

See \href{http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html\#bullet-lists}{reStructuredText Bullet Lists}

\end{DUfieldlist}


\subsubsection{Links%
  \label{links}%
}

Clicking on links will executing it's default behavior
(open browser/edit file/jump to internal target)

\texttt{<Tab>/<S-Tab>} in Normal mode will jump to next/prev link.
%
\begin{itemize}

\item Create Links:

Normal Mode Only :
%
\begin{itemize}

\item \texttt{:RivCreateLink} \texttt{<C-E>il}
create a link from current word.

If it's empty, you will be asked to input one.

\item \texttt{:RivCreateFoot} \texttt{<C-E>if}
create a auto numbered footnote.
And append the footnote target to the end of file.

\end{itemize}

\end{itemize}


\subsubsection{Table%
  \label{table}%
}

Auto Format Table (Grid Table Only).
(Currently require vim compiled with python. )

When folded, the numbers of rows and columns will be shown.

Currently only Support the Grid Table with equal columns each row .

Insert Mode Only:

To create a table , just insert \texttt{| xxx |} and press \texttt{<Enter>}.

\setlength{\DUtablewidth}{\linewidth}
\begin{longtable*}[c]{|p{0.214\DUtablewidth}|p{0.703\DUtablewidth}|}
\hline
\textbf{%
The Grid Table
} & \textbf{%
Will be Auto Formatted after Leave Insert Mode
} \\
\hline
\endfirsthead
\hline
\textbf{%
The Grid Table
} & \textbf{%
Will be Auto Formatted after Leave Insert Mode
} \\
\hline
\endhead
\multicolumn{2}{c}{\hfill ... continued on next page} \\
\endfoot
\endlastfoot

Lines
 & %
\begin{itemize}

\item <Enter> in column to add a new line of column

\item This is the second line of in same row of table.

\end{itemize}
 \\
\hline

Rows
 & 
<Enter> in seperator to add a new row
 \\
\hline

Cells
 & 
<Tab> and <S-Tab> in table will switch to next/prev cell
 \\
\hline
\end{longtable*}


\subsubsection{Folding%
  \label{folding}%
}

Fold reStructuredText file with sections, lists, and blocks automatically.

When folded, some info of the item will be shown at the foldline.

Folding will be updated after you write buffer to file.

Pressing \texttt{<Enter>} or double clicking on folded lines will open that fold.
%
\begin{itemize}

\item Update Folding: use \texttt{zx} or \texttt{<C-E><Space>j}

\item Toggle Folding: use \texttt{za} or \texttt{<C-E><Space><Space>}

\item Toggle all Folding: use \texttt{zA} or \texttt{<C-E><Space>m}

\end{itemize}

To show the blank lines in the end of a folding, use \texttt{g:riv\_fold\_blank}.
%
\begin{quote}
%
\begin{itemize}

\item when set to 2 , will fold all blank lines.

\item when set to 1 , will fold all blank lines,
but showing one blank line if there are some.

\item when set to 0 , will fold one blank line ,
but will showing the rest.

\item default is 2

\end{itemize}

\end{quote}

For large files. calculate folding may cost time.
So there are some options about it.
%
\begin{itemize}

\item \texttt{g:riv\_fold\_level} set which structures to be fold.
%
\begin{itemize}

\item when set to 3 , means 'sections,lists and blocks'.

\item when set to 2 , means 'sections and lists'

\item when set to 1 , means 'sections'

\item when set to 0 , means 'None'

\item default is 3.

\end{itemize}

\item \texttt{g:riv\_auto\_fold\_force}, enable reducing fold level when editing large files.
%
\begin{itemize}

\item when set to 1 , means 'On'.

\item default is 1.

\end{itemize}

\item \texttt{g:riv\_auto\_fold1\_lines}, the minimum lines file containing,
to force set fold\_level to section only.

default is 5000.

\item \texttt{g:riv\_auto\_fold2\_lines}, the minimum lines file containing,
to force set fold\_level to section and list only.

default is 3000.

\end{itemize}

To set an initial folding level for a file . you can use \texttt{modeline}:
%
\begin{quote}{\ttfamily \raggedright \noindent
..~~vim:~fdl=0~:\\
~~~~This~means~all~fold~will~be~folded~when~opening~files
}
\end{quote}


\subsubsection{Highlighting%
  \label{highlighting}%
}

Improved syntax file.
%
\begin{itemize}

\item Lists Highlightings

\item Code Block syntax highlighting:
%
\begin{quote}{\ttfamily \raggedright \noindent
..~code::~python\\
~\\
~~~~\#~python~highlighting\\
~~~~\#~github~does~not~support~syntax~highlighting~for~rst~file~yet.\\
~~~~x~=~{[}0~for~i~in~range(100){]}
}
\end{quote}

You can use \texttt{g:riv\_highlight\_code} to set which type of code to highlight.
default is \texttt{lua,python,cpp,javascript,vim,sh}
%
\begin{DUfieldlist}
\item[{NOTE:}]
To enable highlighting in converted file,
python \texttt{pygments} package must installed for \texttt{docutils}
parsing syntax highlighting.

see \url{http://docutils.sourceforge.net/sandbox/code-block-directive/tools/pygments-enhanced-front-ends/}

\end{DUfieldlist}

\item The links under cursor are highlighted.
Disable it by set \texttt{g:riv\_hover\_link\_hl} to 0

\end{itemize}


\subsubsection{Indent%
  \label{indent}%
}

Improved indent file.

In Insert mode , when starting a newline or
%
\begin{itemize}

\item starting newline (\texttt{<Enter>} or \texttt{o} in Normal mode):
will start newline with correct indentation

\item \texttt{<BS>} (BackSpace key).
will goto correct indentation if no preceding non-whitespace character
and after the indentation's \texttt{\&shiftwidth} position , otherwise \texttt{<BS>}

\end{itemize}


\subsubsection{Insert%
  \label{insert}%
}

Improvment for some mapping in insert mode. Detail in each section.

Also most shortcut can be used in insert mode. like \texttt{<C-E>ee} \texttt{<C-E>s1} ...
%
\begin{itemize}

\item Enter: Insert \hyperref[lists]{lists} with \texttt{<C-Enter>} , \texttt{<S-Enter>} and \texttt{<C-S-Enter>}.

When in a \hyperref[table]{table}, \texttt{<Enter>} to create a new line

When not in a table, will start new line with correct indentation

\item Tab:  When in a table , \texttt{<Tab>} to next cell , \texttt{<S-Tab>} to previous one.

When not in a table , will act as \texttt{<C-N>} or \texttt{<C-P>} if insert-popup-menu
is visible.

Otherwise output a \texttt{<Tab>}

\item BackSpace: for \hyperref[indent]{indent}, will goto correct indentation if no preceding non-whitespace character and after the indentation's \texttt{\&shiftwidth} position ,
otherwise \texttt{<BS>}

\end{itemize}


\subsection{For Riv%
  \label{for-riv}%
}

These features are for the Riv Project.


\subsubsection{Project%
  \label{project}%
}

Manage your reStructuredText documents in a wiki way.
%
\begin{itemize}

\item By default. the path of project is at '\textasciitilde{}/Documents/Riv',
you can set it by adding project to \texttt{g:riv\_projects} in your vimrc.:
%
\begin{quote}{\ttfamily \raggedright \noindent
let~project1~=~\{~'path':~'\textasciitilde{}/Dropbox/rst',\}\\
let~g:riv\_projects~=~{[}project1{]}\\
~\\
"~You~could~add~multiple~projects~as~well\\
let~project2~=~\{~'path':~'\textasciitilde{}/Dropbox/rst2',\}\\
let~g:riv\_projects~=~{[}project1,~project2{]}
}
\end{quote}

\item Use \texttt{:RivIndex} \texttt{<C-E>ww} to open the project index.

\item Use \texttt{:RivAsk} \texttt{<C-E>wa} to choose one project to open.

\end{itemize}


\subsubsection{File%
  \label{file}%
}

As reStructuredText haven't define a pattern for local files currently.

\textbf{Riv}  provides two kinds of style to determine the local file
in the rst documents.

The \texttt{bare extension style} and \texttt{square bracket style}
%
\begin{itemize}

\item You can switch the style with \texttt{g:riv\_localfile\_linktype}
%
\begin{itemize}

\item when set to 1, use \texttt{bare extension style}:

words like \texttt{xxx.rst} \texttt{xxx.py} \texttt{xxx.cpp} will be detected as file link.

words like \texttt{xxx/} will be considered as directory ,
and link to \texttt{xxx/index.rst}

words like \texttt{/xxxx/xxx.rst} \texttt{\textasciitilde{}/xxx/xxx.rst} \texttt{x:/xxx.rst}
will be considered as external file links

words like \texttt{/xxxx/xxx/} \texttt{\textasciitilde{}/xxx/xxx/}
will be considered as external directory links,
and link to the directory.

You can add other extensions with \texttt{g:riv\_file\_link\_ext}.
which default is \texttt{vim,cpp,c,py,rb,lua,pl} ,
meaning these files will be recongized.

\item when set to 2, \texttt{square bracket style}:

words like \texttt{{[}xxx{]}} \texttt{{[}xxx.vim{]}} will be detected as file link.

words like \texttt{{[}xxx/{]}' will link to `{}`xxx/index.rst}

words like \texttt{{[}/xxxx/xxx.rst{]}} \texttt{{[}\textasciitilde{}/xxx/xxx.rst{]}}  \texttt{{[}x:/xxx/xxx.rst{]}}
will be considered as external file links

words like \texttt{{[}/xxxx/xxx/{]}} \texttt{{[}\textasciitilde{}/xxx/xxx/{]}}
will be considered as external directory links,
and link to the directory.

\item when set to 0, no local file link.

\item default is 1.

\end{itemize}

\item When Publish to html, all detected local file link will be converted to an embedded link.
%
\begin{quote}

e.g. \href{xxx.html}{xxx.rst} \url{xxx.py}

\end{quote}

\item To delete a local file in project.

\texttt{:RivDelete} \texttt{<C-E>df}
it will also delete all reference to this file in \texttt{index.rst} of the directory.

\end{itemize}


\subsubsection{Scratch%
  \label{scratch}%
}

The scratches is created auto named by date in '\%Y-\%m-\%d' format.
It is a place for writing diary or hold idea and thoughts.

Scratches will be put in scratch folder in project directory.
You can change it with 'scratch\_path' of project setting ,default is 'Scratch':
%
\begin{quote}{\ttfamily \raggedright \noindent
"~Use~another~directory\\
let~project1.scratch\_path~=~'Diary'\\
"~Use~absolute~path,~then~no~todo~helper~and~no~converting~for~it.\\
let~project1.scratch\_path~=~'\textasciitilde{}/Documents/Diary'
}
\end{quote}
%
\begin{itemize}

\item \texttt{:RivScratchCreate} \texttt{<C-E>cc}
Create or jump to the scratch of today.

\item \texttt{:RivScratchView} \texttt{<C-E>cv}
View Scratch index.

The index is auto created. You can change the month name using
\texttt{g:riv\_month\_names}.

default is:
%
\begin{quote}

\texttt{January,February,March,April,May,June,July,August,September,October,November,December}

\end{quote}

\end{itemize}


\subsubsection{Todos%
  \label{todos}%
}

Writing and highlighting todo items in reStructuredText documents.
It's not the reStructuredText syntax.
So no highlighting when converted.

Todo items are todo-box or todo-keywords in bullet/enumerated/field lists.

Datestamps are supported to show todo items's start/end date.

The statistics of the todo progress (include child items) will be shown when folded.
%
\begin{itemize}

\item A Todo item:
%
\begin{itemize}

\item {[} {]} This is a todo item of initial state.

\item {[}o{]} This is a todo item that's in progress.

\item {[}X{]} This is a todo item that's finished.

\end{itemize}

\item Datestamps:
%
\begin{itemize}

\item You can set the todo item timestamp style with 'g:riv\_todo\_timestamp'
%
\begin{itemize}

\item when set to 2 , will init with a start datestamp.
and when it's done , will add a finish datestamp.
\newcounter{listcnt0}
\begin{list}{\arabic{listcnt0}.}
{
\usecounter{listcnt0}
\setlength{\rightmargin}{\leftmargin}
}

\item {[} {]} 2012-06-23 This is a todo item with start datestamp

\item {[}X{]} 2012-06-23 \textasciitilde{} 2012-06-23  A todo item with both start and finish datestamp.
\end{list}

\item when set to 1 , no init datestamp ,
will add a finish datestamp when it's done.
\setcounter{listcnt0}{0}
\begin{list}{\arabic{listcnt0}.}
{
\usecounter{listcnt0}
\setlength{\rightmargin}{\leftmargin}
}

\item {[}X{]} 2012-06-23 This is a todo item with finish datestamp,
\end{list}

\item when set to 0 , no datestamp

\item Default is 1

\end{itemize}

\end{itemize}

\item Keyword groups:
%
\begin{itemize}

\item FIXED A todo item of FIXME/FIXED keyword.

\item DONE 2012-06-13 \textasciitilde{} 2012-06-23 A todo item of TODO/DONE keyword.

\item You can define your own keyword group for todo items with \texttt{g:riv\_todo\_keywords}

each keyword is seperated by ',' , each group is seperated by ';'

default is \texttt{TODO,DONE;FIXME,FIXED;START,PROCESS,STOP},

\end{itemize}

\item Actions:
%
\begin{itemize}

\item Use \texttt{:RivTodoToggle} or \texttt{<C-E>ee} to add or switch the todo status.

\item Double Click or \texttt{<Enter>} in the box/keyword to swith the todo status

\item Double Click or \texttt{<Enter>} or \texttt{:RivTodoDate} on a datestamp to change date.

If you have \href{https://github.com/mattn/calendar-vim}{Calendar} installed , it will use it to choose date.

\item Use \texttt{:RivTodoType1} \texttt{<C-E>e1} ... \texttt{:RivTodoType4} \texttt{<C-E>e4}
to add or change the todo item by group.

\item Use \texttt{:RivTodoAsk} \texttt{<C-E>e`} will show an keyword group list to choose.

\item Use \texttt{:RivTodoDel} \texttt{<C-E>ex} will delete the todo item

\item Use \texttt{:RivCreateDate} \texttt{<C-E>id} to insert a datestamp of today anywhere.

\item Use \texttt{:RivCreateTime} \texttt{<C-E>it} to insert a timestamp of current time anywhere.

\item Use \texttt{:RivTodoHelper} or \texttt{<C-E>ht} to open a \hyperref[todo-helper]{Todo Helper}

\end{itemize}

\end{itemize}


\subsubsection{Helpers%
  \label{helpers}%
}

A window to show something of the project.
%
\begin{itemize}

\item %
\phantomsection\label{todo-helper}Todo Helper : A helper to manage todo items of current project.
%
\begin{itemize}

\item \texttt{:RivTodoHelper} or \texttt{<C-E>ht}
Open to view all todo-items.
Default is in search mode.
%
\begin{itemize}

\item \texttt{/} to search todo item matching inputing, \texttt{<Enter>} or \texttt{<Esc>} to quit
search mode.

Set \texttt{g:riv\_fuzzy\_help} to 1 to enable fuzzy searching in helper.

\item \texttt{<Tab>} to switch content,
there are 'All/Todo/Done' contents for Todo Helper.

\item \texttt{<Enter>} or Double Click to jump to the todo item.

\item \texttt{<Esc>} or \texttt{q} to quit the window

\end{itemize}

\end{itemize}

\end{itemize}


\subsubsection{Publish%
  \label{publish}%
}

Some wrapper to convert rst files to html/xml/latex/odt/...
(require python docutils package )
%
\begin{DUfieldlist}
\item[{NOTE:}]
When converting, It will first try \texttt{rst2xxxx2.py} , then try \texttt{rst2xxxx.py}

You should install the package of python2 version .

Otherwise errors will occour.

\end{DUfieldlist}
%
\begin{itemize}

\item \texttt{:Riv2HtmlFile}  \texttt{<C-E>2hf}
convert to html file.

\item \texttt{:Riv2HtmlAndBrowse}  \texttt{<C-E>2hh}
convert to html file and browse.
default is 'firefox'

The browser is set with \texttt{g:riv\_web\_browser}

\item \texttt{:Riv2HtmlProject} \texttt{<C-E>2hp} converting whole project into html.
And all the file with extension in \texttt{g:riv\_file\_link\_ext} will be copied there too.

\end{itemize}

Convert to the file and browse.
%
\begin{itemize}

\item \texttt{:Riv2Odt} \texttt{<C-E>2oo} convert to odt file and browse by ft browser

The browser is set with \texttt{g:riv\_ft\_browser}.
default is (unix:'xdg-open', windows:'start')

\item \texttt{:Riv2Xml} \texttt{<C-E>2xx} convert to xml file and browse by web browser

\item \texttt{:Riv2S5} \texttt{<C-E>2ss} convert to s5 file and browse by web browser

\item \texttt{:Riv2Latex} \texttt{<C-E>2ll} convert to latex file and edit by gvim

\item For the files that are in a project.
The path of converted files by default is under \texttt{\_build} in your project directory.
%
\begin{itemize}

\item To change the path. Set it in your vimrc:
%
\begin{quote}{\ttfamily \raggedright \noindent
"~Assume~you~have~a~project~name~project~1\\
let~project1.build\_path~=~'\textasciitilde{}/Documents/Riv\_Build'
}
\end{quote}

\item Open the build path: \texttt{:Riv2BuildPath} \texttt{<C-E>2b}

\end{itemize}

\item For the files that not in a project.
\texttt{g:riv\_temp\_path} is used to determine the output path
%
\begin{itemize}

\item When it's empty , the converted file is put under the same directory of file ,

\item Otherwise the converted file is put in the \texttt{g:riv\_temp\_path},
make sure it's an absolute path.

\item Also no local file link will be converted.

\end{itemize}

\end{itemize}

\end{document}
